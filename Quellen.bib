
@article{rahman_as_2020,
	title = {The ‘as code’ activities: development anti-patterns for infrastructure as code},
	volume = {25},
	rights = {Springer Science+Business Media, {LLC}, part of Springer Nature 2020},
	issn = {1382-3256},
	doi = {10.1007/s10664-020-09841-8},
	abstract = {Context: The ‘as code’ suffix in infrastructure as code ({IaC}) refers to applying software engineering activities, such as version control, to maintain {IaC} scripts. Without the application of these activities, defects that can have serious consequences may be introduced in {IaC} scripts. A systematic investigation of the development anti-patterns for {IaC} scripts can guide practitioners in identifying activities to avoid defects in {IaC} scripts. Development anti-patterns are recurring development activities that relate with defective {IaC} scripts. Goal: The goal of this paper is to help practitioners improve the quality of infrastructure as code ({IaC}) scripts by identifying development activities that relate with defective {IaC} scripts. Methodology: We identify development anti-patterns by adopting a mixed-methods approach, where we apply quantitative analysis with 2,138 open source {IaC} scripts and conduct a survey with 51 practitioners. Findings: We observe five development activities to be related with defective {IaC} scripts from our quantitative analysis. We identify five development anti-patterns namely, ‘boss is not around’, ‘many cooks spoil’, ‘minors are spoiler’, ‘silos’, and ‘unfocused contribution’. Conclusion: Our identified development anti-patterns suggest the importance of ‘as code’ activities in {IaC} because these activities are related to quality of {IaC} scripts.},
	pages = {3430--3467},
	number = {5},
	journaltitle = {Empirical software engineering : an international journal},
	author = {Rahman, Akond and Farhana, Effat and Williams, Laurie},
	date = {2020},
	note = {Place: New York
Publisher: Springer {US}},
	keywords = {Software engineering, Compilers, Computer Science, Computer Science - Software Engineering, Defects, Identification methods, Infrastructure, Interpreters, Programming Languages, Quantitative analysis, Science \& Technology, Scripts, Software Engineering/Programming and Operating Systems, Technology, Version control, Pattern, Antipattern, {IaC}, Infrastructure as Code},
}


@article{ozel_infrastructure_2020,
	title = {Infrastructure as Code als Maßnahme zur Cloud Automatisierung – Hilfestellung zur Auswahl des richtigen Werkzeugs},
	volume = {57},
	issn = {2198-2775},
	url = {https://doi.org/10.1365/s40702-020-00657-0},
	doi = {10.1365/s40702-020-00657-0},
	abstract = {Es stehen mittlerweile mehrere {IaC}-Tools zur Verfügung, um die Bereitstellung und Konfiguration der Cloud-Infrastruktur zu automatisieren. Mit der Fülle an Auswahlmöglichkeiten gestaltet sich der Auswahlprozess für das geeignete {IaC}-Tool zunehmend schwieriger. Zusätzlich mangelt es an einer Entscheidungshilfe für den Auswahlprozess des geeigneten {IaC}-Tools. Wir glauben, dass eine Entscheidungshilfe für den Auswahlprozess des {IaC}-Tools dazu beitragen kann, bei der Cloud Migration von Anwendungen einen besseren Service zu bieten. Daher zielt diese Forschungsarbeit darauf ab, den Auswahlprozess zu unterstützen, indem eine Hilfestellung bei der Auswahl des richtigen {IaC}-Tools gegeben wird.},
	pages = {936--948},
	number = {5},
	journaltitle = {{HMD} Praxis der Wirtschaftsinformatik},
	shortjournal = {{HMD} Praxis der Wirtschaftsinformatik},
	author = {Özel, Abdullah and Pautz, Tobias and Schmidt, Nikolaus},
	date = {2020-10-01},
}
